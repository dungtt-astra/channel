// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: channel/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCommitment struct {
	Creator       string      `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	From          string      `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	Cointocreator *types.Coin `protobuf:"bytes,3,opt,name=cointocreator,proto3" json:"cointocreator,omitempty"`
	ToTimelock    string      `protobuf:"bytes,4,opt,name=toTimelock,proto3" json:"toTimelock,omitempty"`
	Blockheight   uint64      `protobuf:"varint,5,opt,name=blockheight,proto3" json:"blockheight,omitempty"`
	ToHashlock    string      `protobuf:"bytes,6,opt,name=toHashlock,proto3" json:"toHashlock,omitempty"`
	Hashcode      string      `protobuf:"bytes,7,opt,name=hashcode,proto3" json:"hashcode,omitempty"`
	Coinhtlc      *types.Coin `protobuf:"bytes,8,opt,name=coinhtlc,proto3" json:"coinhtlc,omitempty"`
	Channelid     string      `protobuf:"bytes,9,opt,name=channelid,proto3" json:"channelid,omitempty"`
}

func (m *MsgCommitment) Reset()         { *m = MsgCommitment{} }
func (m *MsgCommitment) String() string { return proto.CompactTextString(m) }
func (*MsgCommitment) ProtoMessage()    {}
func (*MsgCommitment) Descriptor() ([]byte, []int) {
	return fileDescriptor_82d382f6faba5dbf, []int{0}
}
func (m *MsgCommitment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCommitment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCommitment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCommitment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCommitment.Merge(m, src)
}
func (m *MsgCommitment) XXX_Size() int {
	return m.Size()
}
func (m *MsgCommitment) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCommitment.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCommitment proto.InternalMessageInfo

func (m *MsgCommitment) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCommitment) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MsgCommitment) GetCointocreator() *types.Coin {
	if m != nil {
		return m.Cointocreator
	}
	return nil
}

func (m *MsgCommitment) GetToTimelock() string {
	if m != nil {
		return m.ToTimelock
	}
	return ""
}

func (m *MsgCommitment) GetBlockheight() uint64 {
	if m != nil {
		return m.Blockheight
	}
	return 0
}

func (m *MsgCommitment) GetToHashlock() string {
	if m != nil {
		return m.ToHashlock
	}
	return ""
}

func (m *MsgCommitment) GetHashcode() string {
	if m != nil {
		return m.Hashcode
	}
	return ""
}

func (m *MsgCommitment) GetCoinhtlc() *types.Coin {
	if m != nil {
		return m.Coinhtlc
	}
	return nil
}

func (m *MsgCommitment) GetChannelid() string {
	if m != nil {
		return m.Channelid
	}
	return ""
}

type MsgCommitmentResponse struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *MsgCommitmentResponse) Reset()         { *m = MsgCommitmentResponse{} }
func (m *MsgCommitmentResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCommitmentResponse) ProtoMessage()    {}
func (*MsgCommitmentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_82d382f6faba5dbf, []int{1}
}
func (m *MsgCommitmentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCommitmentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCommitmentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCommitmentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCommitmentResponse.Merge(m, src)
}
func (m *MsgCommitmentResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCommitmentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCommitmentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCommitmentResponse proto.InternalMessageInfo

func (m *MsgCommitmentResponse) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type MsgWithdrawTimelock struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	To      string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Index   string `protobuf:"bytes,3,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *MsgWithdrawTimelock) Reset()         { *m = MsgWithdrawTimelock{} }
func (m *MsgWithdrawTimelock) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawTimelock) ProtoMessage()    {}
func (*MsgWithdrawTimelock) Descriptor() ([]byte, []int) {
	return fileDescriptor_82d382f6faba5dbf, []int{2}
}
func (m *MsgWithdrawTimelock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawTimelock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawTimelock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawTimelock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawTimelock.Merge(m, src)
}
func (m *MsgWithdrawTimelock) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawTimelock) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawTimelock.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawTimelock proto.InternalMessageInfo

func (m *MsgWithdrawTimelock) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgWithdrawTimelock) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *MsgWithdrawTimelock) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type MsgWithdrawTimelockResponse struct {
}

func (m *MsgWithdrawTimelockResponse) Reset()         { *m = MsgWithdrawTimelockResponse{} }
func (m *MsgWithdrawTimelockResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawTimelockResponse) ProtoMessage()    {}
func (*MsgWithdrawTimelockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_82d382f6faba5dbf, []int{3}
}
func (m *MsgWithdrawTimelockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawTimelockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawTimelockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawTimelockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawTimelockResponse.Merge(m, src)
}
func (m *MsgWithdrawTimelockResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawTimelockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawTimelockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawTimelockResponse proto.InternalMessageInfo

type MsgWithdrawHashlock struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	To      string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Index   string `protobuf:"bytes,3,opt,name=index,proto3" json:"index,omitempty"`
	Secret  string `protobuf:"bytes,4,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (m *MsgWithdrawHashlock) Reset()         { *m = MsgWithdrawHashlock{} }
func (m *MsgWithdrawHashlock) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawHashlock) ProtoMessage()    {}
func (*MsgWithdrawHashlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_82d382f6faba5dbf, []int{4}
}
func (m *MsgWithdrawHashlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawHashlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawHashlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawHashlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawHashlock.Merge(m, src)
}
func (m *MsgWithdrawHashlock) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawHashlock) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawHashlock.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawHashlock proto.InternalMessageInfo

func (m *MsgWithdrawHashlock) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgWithdrawHashlock) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *MsgWithdrawHashlock) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *MsgWithdrawHashlock) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

type MsgWithdrawHashlockResponse struct {
}

func (m *MsgWithdrawHashlockResponse) Reset()         { *m = MsgWithdrawHashlockResponse{} }
func (m *MsgWithdrawHashlockResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawHashlockResponse) ProtoMessage()    {}
func (*MsgWithdrawHashlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_82d382f6faba5dbf, []int{5}
}
func (m *MsgWithdrawHashlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawHashlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawHashlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawHashlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawHashlockResponse.Merge(m, src)
}
func (m *MsgWithdrawHashlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawHashlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawHashlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawHashlockResponse proto.InternalMessageInfo

type MsgCloseChannel struct {
	Creator   string      `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	From      string      `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	ToA       string      `protobuf:"bytes,3,opt,name=toA,proto3" json:"toA,omitempty"`
	CoinA     *types.Coin `protobuf:"bytes,4,opt,name=coinA,proto3" json:"coinA,omitempty"`
	ToB       string      `protobuf:"bytes,5,opt,name=toB,proto3" json:"toB,omitempty"`
	CoinB     *types.Coin `protobuf:"bytes,6,opt,name=coinB,proto3" json:"coinB,omitempty"`
	Channelid string      `protobuf:"bytes,7,opt,name=channelid,proto3" json:"channelid,omitempty"`
}

func (m *MsgCloseChannel) Reset()         { *m = MsgCloseChannel{} }
func (m *MsgCloseChannel) String() string { return proto.CompactTextString(m) }
func (*MsgCloseChannel) ProtoMessage()    {}
func (*MsgCloseChannel) Descriptor() ([]byte, []int) {
	return fileDescriptor_82d382f6faba5dbf, []int{6}
}
func (m *MsgCloseChannel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCloseChannel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCloseChannel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCloseChannel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCloseChannel.Merge(m, src)
}
func (m *MsgCloseChannel) XXX_Size() int {
	return m.Size()
}
func (m *MsgCloseChannel) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCloseChannel.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCloseChannel proto.InternalMessageInfo

func (m *MsgCloseChannel) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCloseChannel) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MsgCloseChannel) GetToA() string {
	if m != nil {
		return m.ToA
	}
	return ""
}

func (m *MsgCloseChannel) GetCoinA() *types.Coin {
	if m != nil {
		return m.CoinA
	}
	return nil
}

func (m *MsgCloseChannel) GetToB() string {
	if m != nil {
		return m.ToB
	}
	return ""
}

func (m *MsgCloseChannel) GetCoinB() *types.Coin {
	if m != nil {
		return m.CoinB
	}
	return nil
}

func (m *MsgCloseChannel) GetChannelid() string {
	if m != nil {
		return m.Channelid
	}
	return ""
}

type MsgCloseChannelResponse struct {
}

func (m *MsgCloseChannelResponse) Reset()         { *m = MsgCloseChannelResponse{} }
func (m *MsgCloseChannelResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCloseChannelResponse) ProtoMessage()    {}
func (*MsgCloseChannelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_82d382f6faba5dbf, []int{7}
}
func (m *MsgCloseChannelResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCloseChannelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCloseChannelResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCloseChannelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCloseChannelResponse.Merge(m, src)
}
func (m *MsgCloseChannelResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCloseChannelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCloseChannelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCloseChannelResponse proto.InternalMessageInfo

type MsgOpenChannel struct {
	Creator      string      `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	PartA        string      `protobuf:"bytes,2,opt,name=partA,proto3" json:"partA,omitempty"`
	PartB        string      `protobuf:"bytes,3,opt,name=partB,proto3" json:"partB,omitempty"`
	CoinA        *types.Coin `protobuf:"bytes,4,opt,name=coinA,proto3" json:"coinA,omitempty"`
	CoinB        *types.Coin `protobuf:"bytes,5,opt,name=coinB,proto3" json:"coinB,omitempty"`
	MultisigAddr string      `protobuf:"bytes,6,opt,name=multisigAddr,proto3" json:"multisigAddr,omitempty"`
}

func (m *MsgOpenChannel) Reset()         { *m = MsgOpenChannel{} }
func (m *MsgOpenChannel) String() string { return proto.CompactTextString(m) }
func (*MsgOpenChannel) ProtoMessage()    {}
func (*MsgOpenChannel) Descriptor() ([]byte, []int) {
	return fileDescriptor_82d382f6faba5dbf, []int{8}
}
func (m *MsgOpenChannel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgOpenChannel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgOpenChannel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgOpenChannel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgOpenChannel.Merge(m, src)
}
func (m *MsgOpenChannel) XXX_Size() int {
	return m.Size()
}
func (m *MsgOpenChannel) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgOpenChannel.DiscardUnknown(m)
}

var xxx_messageInfo_MsgOpenChannel proto.InternalMessageInfo

func (m *MsgOpenChannel) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgOpenChannel) GetPartA() string {
	if m != nil {
		return m.PartA
	}
	return ""
}

func (m *MsgOpenChannel) GetPartB() string {
	if m != nil {
		return m.PartB
	}
	return ""
}

func (m *MsgOpenChannel) GetCoinA() *types.Coin {
	if m != nil {
		return m.CoinA
	}
	return nil
}

func (m *MsgOpenChannel) GetCoinB() *types.Coin {
	if m != nil {
		return m.CoinB
	}
	return nil
}

func (m *MsgOpenChannel) GetMultisigAddr() string {
	if m != nil {
		return m.MultisigAddr
	}
	return ""
}

type MsgOpenChannelResponse struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *MsgOpenChannelResponse) Reset()         { *m = MsgOpenChannelResponse{} }
func (m *MsgOpenChannelResponse) String() string { return proto.CompactTextString(m) }
func (*MsgOpenChannelResponse) ProtoMessage()    {}
func (*MsgOpenChannelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_82d382f6faba5dbf, []int{9}
}
func (m *MsgOpenChannelResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgOpenChannelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgOpenChannelResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgOpenChannelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgOpenChannelResponse.Merge(m, src)
}
func (m *MsgOpenChannelResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgOpenChannelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgOpenChannelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgOpenChannelResponse proto.InternalMessageInfo

func (m *MsgOpenChannelResponse) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type MsgFund struct {
	Creator   string      `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	From      string      `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	Channelid string      `protobuf:"bytes,3,opt,name=channelid,proto3" json:"channelid,omitempty"`
	Coinlock  *types.Coin `protobuf:"bytes,4,opt,name=coinlock,proto3" json:"coinlock,omitempty"`
	Hashcode  string      `protobuf:"bytes,5,opt,name=hashcode,proto3" json:"hashcode,omitempty"`
	Timelock  string      `protobuf:"bytes,6,opt,name=timelock,proto3" json:"timelock,omitempty"`
	Multisig  string      `protobuf:"bytes,7,opt,name=multisig,proto3" json:"multisig,omitempty"`
}

func (m *MsgFund) Reset()         { *m = MsgFund{} }
func (m *MsgFund) String() string { return proto.CompactTextString(m) }
func (*MsgFund) ProtoMessage()    {}
func (*MsgFund) Descriptor() ([]byte, []int) {
	return fileDescriptor_82d382f6faba5dbf, []int{10}
}
func (m *MsgFund) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFund) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFund.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFund) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFund.Merge(m, src)
}
func (m *MsgFund) XXX_Size() int {
	return m.Size()
}
func (m *MsgFund) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFund.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFund proto.InternalMessageInfo

func (m *MsgFund) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgFund) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MsgFund) GetChannelid() string {
	if m != nil {
		return m.Channelid
	}
	return ""
}

func (m *MsgFund) GetCoinlock() *types.Coin {
	if m != nil {
		return m.Coinlock
	}
	return nil
}

func (m *MsgFund) GetHashcode() string {
	if m != nil {
		return m.Hashcode
	}
	return ""
}

func (m *MsgFund) GetTimelock() string {
	if m != nil {
		return m.Timelock
	}
	return ""
}

func (m *MsgFund) GetMultisig() string {
	if m != nil {
		return m.Multisig
	}
	return ""
}

type MsgFundResponse struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *MsgFundResponse) Reset()         { *m = MsgFundResponse{} }
func (m *MsgFundResponse) String() string { return proto.CompactTextString(m) }
func (*MsgFundResponse) ProtoMessage()    {}
func (*MsgFundResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_82d382f6faba5dbf, []int{11}
}
func (m *MsgFundResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFundResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFundResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFundResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFundResponse.Merge(m, src)
}
func (m *MsgFundResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgFundResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFundResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFundResponse proto.InternalMessageInfo

func (m *MsgFundResponse) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type MsgAcceptfund struct {
	Creator   string      `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	From      string      `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	Channelid string      `protobuf:"bytes,3,opt,name=channelid,proto3" json:"channelid,omitempty"`
	Coin      *types.Coin `protobuf:"bytes,4,opt,name=coin,proto3" json:"coin,omitempty"`
	Hashcode  string      `protobuf:"bytes,5,opt,name=hashcode,proto3" json:"hashcode,omitempty"`
	Timelock  string      `protobuf:"bytes,6,opt,name=timelock,proto3" json:"timelock,omitempty"`
	Multisig  string      `protobuf:"bytes,7,opt,name=multisig,proto3" json:"multisig,omitempty"`
}

func (m *MsgAcceptfund) Reset()         { *m = MsgAcceptfund{} }
func (m *MsgAcceptfund) String() string { return proto.CompactTextString(m) }
func (*MsgAcceptfund) ProtoMessage()    {}
func (*MsgAcceptfund) Descriptor() ([]byte, []int) {
	return fileDescriptor_82d382f6faba5dbf, []int{12}
}
func (m *MsgAcceptfund) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAcceptfund) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAcceptfund.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAcceptfund) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAcceptfund.Merge(m, src)
}
func (m *MsgAcceptfund) XXX_Size() int {
	return m.Size()
}
func (m *MsgAcceptfund) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAcceptfund.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAcceptfund proto.InternalMessageInfo

func (m *MsgAcceptfund) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAcceptfund) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MsgAcceptfund) GetChannelid() string {
	if m != nil {
		return m.Channelid
	}
	return ""
}

func (m *MsgAcceptfund) GetCoin() *types.Coin {
	if m != nil {
		return m.Coin
	}
	return nil
}

func (m *MsgAcceptfund) GetHashcode() string {
	if m != nil {
		return m.Hashcode
	}
	return ""
}

func (m *MsgAcceptfund) GetTimelock() string {
	if m != nil {
		return m.Timelock
	}
	return ""
}

func (m *MsgAcceptfund) GetMultisig() string {
	if m != nil {
		return m.Multisig
	}
	return ""
}

type MsgAcceptfundResponse struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *MsgAcceptfundResponse) Reset()         { *m = MsgAcceptfundResponse{} }
func (m *MsgAcceptfundResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAcceptfundResponse) ProtoMessage()    {}
func (*MsgAcceptfundResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_82d382f6faba5dbf, []int{13}
}
func (m *MsgAcceptfundResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAcceptfundResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAcceptfundResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAcceptfundResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAcceptfundResponse.Merge(m, src)
}
func (m *MsgAcceptfundResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAcceptfundResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAcceptfundResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAcceptfundResponse proto.InternalMessageInfo

func (m *MsgAcceptfundResponse) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type MsgSendercommit struct {
	Creator          string      `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	From             string      `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	Channelid        string      `protobuf:"bytes,3,opt,name=channelid,proto3" json:"channelid,omitempty"`
	Cointosender     *types.Coin `protobuf:"bytes,4,opt,name=cointosender,proto3" json:"cointosender,omitempty"`
	Cointohtlc       *types.Coin `protobuf:"bytes,5,opt,name=cointohtlc,proto3" json:"cointohtlc,omitempty"`
	Hashcodehtlc     string      `protobuf:"bytes,6,opt,name=hashcodehtlc,proto3" json:"hashcodehtlc,omitempty"`
	Timelockhtlc     string      `protobuf:"bytes,7,opt,name=timelockhtlc,proto3" json:"timelockhtlc,omitempty"`
	Cointransfer     *types.Coin `protobuf:"bytes,8,opt,name=cointransfer,proto3" json:"cointransfer,omitempty"`
	Hashcodedest     string      `protobuf:"bytes,9,opt,name=hashcodedest,proto3" json:"hashcodedest,omitempty"`
	Timelockreceiver string      `protobuf:"bytes,10,opt,name=timelockreceiver,proto3" json:"timelockreceiver,omitempty"`
	Timelocksender   string      `protobuf:"bytes,11,opt,name=timelocksender,proto3" json:"timelocksender,omitempty"`
	Multisig         string      `protobuf:"bytes,12,opt,name=multisig,proto3" json:"multisig,omitempty"`
}

func (m *MsgSendercommit) Reset()         { *m = MsgSendercommit{} }
func (m *MsgSendercommit) String() string { return proto.CompactTextString(m) }
func (*MsgSendercommit) ProtoMessage()    {}
func (*MsgSendercommit) Descriptor() ([]byte, []int) {
	return fileDescriptor_82d382f6faba5dbf, []int{14}
}
func (m *MsgSendercommit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendercommit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendercommit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendercommit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendercommit.Merge(m, src)
}
func (m *MsgSendercommit) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendercommit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendercommit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendercommit proto.InternalMessageInfo

func (m *MsgSendercommit) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSendercommit) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MsgSendercommit) GetChannelid() string {
	if m != nil {
		return m.Channelid
	}
	return ""
}

func (m *MsgSendercommit) GetCointosender() *types.Coin {
	if m != nil {
		return m.Cointosender
	}
	return nil
}

func (m *MsgSendercommit) GetCointohtlc() *types.Coin {
	if m != nil {
		return m.Cointohtlc
	}
	return nil
}

func (m *MsgSendercommit) GetHashcodehtlc() string {
	if m != nil {
		return m.Hashcodehtlc
	}
	return ""
}

func (m *MsgSendercommit) GetTimelockhtlc() string {
	if m != nil {
		return m.Timelockhtlc
	}
	return ""
}

func (m *MsgSendercommit) GetCointransfer() *types.Coin {
	if m != nil {
		return m.Cointransfer
	}
	return nil
}

func (m *MsgSendercommit) GetHashcodedest() string {
	if m != nil {
		return m.Hashcodedest
	}
	return ""
}

func (m *MsgSendercommit) GetTimelockreceiver() string {
	if m != nil {
		return m.Timelockreceiver
	}
	return ""
}

func (m *MsgSendercommit) GetTimelocksender() string {
	if m != nil {
		return m.Timelocksender
	}
	return ""
}

func (m *MsgSendercommit) GetMultisig() string {
	if m != nil {
		return m.Multisig
	}
	return ""
}

type MsgSendercommitResponse struct {
	Indexhtlc     string `protobuf:"bytes,1,opt,name=indexhtlc,proto3" json:"indexhtlc,omitempty"`
	Indextransfer string `protobuf:"bytes,2,opt,name=indextransfer,proto3" json:"indextransfer,omitempty"`
}

func (m *MsgSendercommitResponse) Reset()         { *m = MsgSendercommitResponse{} }
func (m *MsgSendercommitResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSendercommitResponse) ProtoMessage()    {}
func (*MsgSendercommitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_82d382f6faba5dbf, []int{15}
}
func (m *MsgSendercommitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendercommitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendercommitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendercommitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendercommitResponse.Merge(m, src)
}
func (m *MsgSendercommitResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendercommitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendercommitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendercommitResponse proto.InternalMessageInfo

func (m *MsgSendercommitResponse) GetIndexhtlc() string {
	if m != nil {
		return m.Indexhtlc
	}
	return ""
}

func (m *MsgSendercommitResponse) GetIndextransfer() string {
	if m != nil {
		return m.Indextransfer
	}
	return ""
}

type MsgSenderwithdrawtimelock struct {
	Creator       string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Transferindex string `protobuf:"bytes,2,opt,name=transferindex,proto3" json:"transferindex,omitempty"`
	To            string `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
}

func (m *MsgSenderwithdrawtimelock) Reset()         { *m = MsgSenderwithdrawtimelock{} }
func (m *MsgSenderwithdrawtimelock) String() string { return proto.CompactTextString(m) }
func (*MsgSenderwithdrawtimelock) ProtoMessage()    {}
func (*MsgSenderwithdrawtimelock) Descriptor() ([]byte, []int) {
	return fileDescriptor_82d382f6faba5dbf, []int{16}
}
func (m *MsgSenderwithdrawtimelock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSenderwithdrawtimelock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSenderwithdrawtimelock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSenderwithdrawtimelock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSenderwithdrawtimelock.Merge(m, src)
}
func (m *MsgSenderwithdrawtimelock) XXX_Size() int {
	return m.Size()
}
func (m *MsgSenderwithdrawtimelock) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSenderwithdrawtimelock.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSenderwithdrawtimelock proto.InternalMessageInfo

func (m *MsgSenderwithdrawtimelock) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSenderwithdrawtimelock) GetTransferindex() string {
	if m != nil {
		return m.Transferindex
	}
	return ""
}

func (m *MsgSenderwithdrawtimelock) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

type MsgSenderwithdrawtimelockResponse struct {
}

func (m *MsgSenderwithdrawtimelockResponse) Reset()         { *m = MsgSenderwithdrawtimelockResponse{} }
func (m *MsgSenderwithdrawtimelockResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSenderwithdrawtimelockResponse) ProtoMessage()    {}
func (*MsgSenderwithdrawtimelockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_82d382f6faba5dbf, []int{17}
}
func (m *MsgSenderwithdrawtimelockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSenderwithdrawtimelockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSenderwithdrawtimelockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSenderwithdrawtimelockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSenderwithdrawtimelockResponse.Merge(m, src)
}
func (m *MsgSenderwithdrawtimelockResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSenderwithdrawtimelockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSenderwithdrawtimelockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSenderwithdrawtimelockResponse proto.InternalMessageInfo

type MsgSenderwithdrawhashlock struct {
	Creator       string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Transferindex string `protobuf:"bytes,2,opt,name=transferindex,proto3" json:"transferindex,omitempty"`
	To            string `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	Secret        string `protobuf:"bytes,4,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (m *MsgSenderwithdrawhashlock) Reset()         { *m = MsgSenderwithdrawhashlock{} }
func (m *MsgSenderwithdrawhashlock) String() string { return proto.CompactTextString(m) }
func (*MsgSenderwithdrawhashlock) ProtoMessage()    {}
func (*MsgSenderwithdrawhashlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_82d382f6faba5dbf, []int{18}
}
func (m *MsgSenderwithdrawhashlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSenderwithdrawhashlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSenderwithdrawhashlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSenderwithdrawhashlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSenderwithdrawhashlock.Merge(m, src)
}
func (m *MsgSenderwithdrawhashlock) XXX_Size() int {
	return m.Size()
}
func (m *MsgSenderwithdrawhashlock) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSenderwithdrawhashlock.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSenderwithdrawhashlock proto.InternalMessageInfo

func (m *MsgSenderwithdrawhashlock) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSenderwithdrawhashlock) GetTransferindex() string {
	if m != nil {
		return m.Transferindex
	}
	return ""
}

func (m *MsgSenderwithdrawhashlock) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *MsgSenderwithdrawhashlock) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

type MsgSenderwithdrawhashlockResponse struct {
}

func (m *MsgSenderwithdrawhashlockResponse) Reset()         { *m = MsgSenderwithdrawhashlockResponse{} }
func (m *MsgSenderwithdrawhashlockResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSenderwithdrawhashlockResponse) ProtoMessage()    {}
func (*MsgSenderwithdrawhashlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_82d382f6faba5dbf, []int{19}
}
func (m *MsgSenderwithdrawhashlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSenderwithdrawhashlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSenderwithdrawhashlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSenderwithdrawhashlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSenderwithdrawhashlockResponse.Merge(m, src)
}
func (m *MsgSenderwithdrawhashlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSenderwithdrawhashlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSenderwithdrawhashlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSenderwithdrawhashlockResponse proto.InternalMessageInfo

type MsgReceiverwithdraw struct {
	Creator       string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Transferindex string `protobuf:"bytes,2,opt,name=transferindex,proto3" json:"transferindex,omitempty"`
	To            string `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	Secret        string `protobuf:"bytes,4,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (m *MsgReceiverwithdraw) Reset()         { *m = MsgReceiverwithdraw{} }
func (m *MsgReceiverwithdraw) String() string { return proto.CompactTextString(m) }
func (*MsgReceiverwithdraw) ProtoMessage()    {}
func (*MsgReceiverwithdraw) Descriptor() ([]byte, []int) {
	return fileDescriptor_82d382f6faba5dbf, []int{20}
}
func (m *MsgReceiverwithdraw) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReceiverwithdraw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReceiverwithdraw.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReceiverwithdraw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReceiverwithdraw.Merge(m, src)
}
func (m *MsgReceiverwithdraw) XXX_Size() int {
	return m.Size()
}
func (m *MsgReceiverwithdraw) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReceiverwithdraw.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReceiverwithdraw proto.InternalMessageInfo

func (m *MsgReceiverwithdraw) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgReceiverwithdraw) GetTransferindex() string {
	if m != nil {
		return m.Transferindex
	}
	return ""
}

func (m *MsgReceiverwithdraw) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *MsgReceiverwithdraw) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

type MsgReceiverwithdrawResponse struct {
}

func (m *MsgReceiverwithdrawResponse) Reset()         { *m = MsgReceiverwithdrawResponse{} }
func (m *MsgReceiverwithdrawResponse) String() string { return proto.CompactTextString(m) }
func (*MsgReceiverwithdrawResponse) ProtoMessage()    {}
func (*MsgReceiverwithdrawResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_82d382f6faba5dbf, []int{21}
}
func (m *MsgReceiverwithdrawResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReceiverwithdrawResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReceiverwithdrawResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReceiverwithdrawResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReceiverwithdrawResponse.Merge(m, src)
}
func (m *MsgReceiverwithdrawResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgReceiverwithdrawResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReceiverwithdrawResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReceiverwithdrawResponse proto.InternalMessageInfo

type MsgReceivercommit struct {
	Creator        string      `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	From           string      `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	Channelid      string      `protobuf:"bytes,3,opt,name=channelid,proto3" json:"channelid,omitempty"`
	Cointoreceiver *types.Coin `protobuf:"bytes,4,opt,name=cointoreceiver,proto3" json:"cointoreceiver,omitempty"`
	Cointohtlc     *types.Coin `protobuf:"bytes,5,opt,name=cointohtlc,proto3" json:"cointohtlc,omitempty"`
	Hashcodehtlc   string      `protobuf:"bytes,6,opt,name=hashcodehtlc,proto3" json:"hashcodehtlc,omitempty"`
	Timelockhtlc   string      `protobuf:"bytes,7,opt,name=timelockhtlc,proto3" json:"timelockhtlc,omitempty"`
	Cointransfer   *types.Coin `protobuf:"bytes,8,opt,name=cointransfer,proto3" json:"cointransfer,omitempty"`
	Hashcodedest   string      `protobuf:"bytes,9,opt,name=hashcodedest,proto3" json:"hashcodedest,omitempty"`
	Timelocksender string      `protobuf:"bytes,10,opt,name=timelocksender,proto3" json:"timelocksender,omitempty"`
	Multisig       string      `protobuf:"bytes,11,opt,name=multisig,proto3" json:"multisig,omitempty"`
}

func (m *MsgReceivercommit) Reset()         { *m = MsgReceivercommit{} }
func (m *MsgReceivercommit) String() string { return proto.CompactTextString(m) }
func (*MsgReceivercommit) ProtoMessage()    {}
func (*MsgReceivercommit) Descriptor() ([]byte, []int) {
	return fileDescriptor_82d382f6faba5dbf, []int{22}
}
func (m *MsgReceivercommit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReceivercommit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReceivercommit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReceivercommit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReceivercommit.Merge(m, src)
}
func (m *MsgReceivercommit) XXX_Size() int {
	return m.Size()
}
func (m *MsgReceivercommit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReceivercommit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReceivercommit proto.InternalMessageInfo

func (m *MsgReceivercommit) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgReceivercommit) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MsgReceivercommit) GetChannelid() string {
	if m != nil {
		return m.Channelid
	}
	return ""
}

func (m *MsgReceivercommit) GetCointoreceiver() *types.Coin {
	if m != nil {
		return m.Cointoreceiver
	}
	return nil
}

func (m *MsgReceivercommit) GetCointohtlc() *types.Coin {
	if m != nil {
		return m.Cointohtlc
	}
	return nil
}

func (m *MsgReceivercommit) GetHashcodehtlc() string {
	if m != nil {
		return m.Hashcodehtlc
	}
	return ""
}

func (m *MsgReceivercommit) GetTimelockhtlc() string {
	if m != nil {
		return m.Timelockhtlc
	}
	return ""
}

func (m *MsgReceivercommit) GetCointransfer() *types.Coin {
	if m != nil {
		return m.Cointransfer
	}
	return nil
}

func (m *MsgReceivercommit) GetHashcodedest() string {
	if m != nil {
		return m.Hashcodedest
	}
	return ""
}

func (m *MsgReceivercommit) GetTimelocksender() string {
	if m != nil {
		return m.Timelocksender
	}
	return ""
}

func (m *MsgReceivercommit) GetMultisig() string {
	if m != nil {
		return m.Multisig
	}
	return ""
}

type MsgReceivercommitResponse struct {
	Indexhtlc     string `protobuf:"bytes,1,opt,name=indexhtlc,proto3" json:"indexhtlc,omitempty"`
	Indextransfer string `protobuf:"bytes,2,opt,name=indextransfer,proto3" json:"indextransfer,omitempty"`
}

func (m *MsgReceivercommitResponse) Reset()         { *m = MsgReceivercommitResponse{} }
func (m *MsgReceivercommitResponse) String() string { return proto.CompactTextString(m) }
func (*MsgReceivercommitResponse) ProtoMessage()    {}
func (*MsgReceivercommitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_82d382f6faba5dbf, []int{23}
}
func (m *MsgReceivercommitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReceivercommitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReceivercommitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReceivercommitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReceivercommitResponse.Merge(m, src)
}
func (m *MsgReceivercommitResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgReceivercommitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReceivercommitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReceivercommitResponse proto.InternalMessageInfo

func (m *MsgReceivercommitResponse) GetIndexhtlc() string {
	if m != nil {
		return m.Indexhtlc
	}
	return ""
}

func (m *MsgReceivercommitResponse) GetIndextransfer() string {
	if m != nil {
		return m.Indextransfer
	}
	return ""
}

func init() {
	proto.RegisterType((*MsgCommitment)(nil), "channel.channel.MsgCommitment")
	proto.RegisterType((*MsgCommitmentResponse)(nil), "channel.channel.MsgCommitmentResponse")
	proto.RegisterType((*MsgWithdrawTimelock)(nil), "channel.channel.MsgWithdrawTimelock")
	proto.RegisterType((*MsgWithdrawTimelockResponse)(nil), "channel.channel.MsgWithdrawTimelockResponse")
	proto.RegisterType((*MsgWithdrawHashlock)(nil), "channel.channel.MsgWithdrawHashlock")
	proto.RegisterType((*MsgWithdrawHashlockResponse)(nil), "channel.channel.MsgWithdrawHashlockResponse")
	proto.RegisterType((*MsgCloseChannel)(nil), "channel.channel.MsgCloseChannel")
	proto.RegisterType((*MsgCloseChannelResponse)(nil), "channel.channel.MsgCloseChannelResponse")
	proto.RegisterType((*MsgOpenChannel)(nil), "channel.channel.MsgOpenChannel")
	proto.RegisterType((*MsgOpenChannelResponse)(nil), "channel.channel.MsgOpenChannelResponse")
	proto.RegisterType((*MsgFund)(nil), "channel.channel.MsgFund")
	proto.RegisterType((*MsgFundResponse)(nil), "channel.channel.MsgFundResponse")
	proto.RegisterType((*MsgAcceptfund)(nil), "channel.channel.MsgAcceptfund")
	proto.RegisterType((*MsgAcceptfundResponse)(nil), "channel.channel.MsgAcceptfundResponse")
	proto.RegisterType((*MsgSendercommit)(nil), "channel.channel.MsgSendercommit")
	proto.RegisterType((*MsgSendercommitResponse)(nil), "channel.channel.MsgSendercommitResponse")
	proto.RegisterType((*MsgSenderwithdrawtimelock)(nil), "channel.channel.MsgSenderwithdrawtimelock")
	proto.RegisterType((*MsgSenderwithdrawtimelockResponse)(nil), "channel.channel.MsgSenderwithdrawtimelockResponse")
	proto.RegisterType((*MsgSenderwithdrawhashlock)(nil), "channel.channel.MsgSenderwithdrawhashlock")
	proto.RegisterType((*MsgSenderwithdrawhashlockResponse)(nil), "channel.channel.MsgSenderwithdrawhashlockResponse")
	proto.RegisterType((*MsgReceiverwithdraw)(nil), "channel.channel.MsgReceiverwithdraw")
	proto.RegisterType((*MsgReceiverwithdrawResponse)(nil), "channel.channel.MsgReceiverwithdrawResponse")
	proto.RegisterType((*MsgReceivercommit)(nil), "channel.channel.MsgReceivercommit")
	proto.RegisterType((*MsgReceivercommitResponse)(nil), "channel.channel.MsgReceivercommitResponse")
}

func init() { proto.RegisterFile("channel/tx.proto", fileDescriptor_82d382f6faba5dbf) }

var fileDescriptor_82d382f6faba5dbf = []byte{
	// 1095 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x58, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0xaf, 0x9b, 0xa6, 0x6d, 0x5e, 0xd2, 0x6c, 0x19, 0x96, 0x92, 0x86, 0x25, 0x04, 0x53, 0xed,
	0x56, 0x15, 0xeb, 0xb0, 0x45, 0x1c, 0x38, 0x20, 0x94, 0x54, 0x42, 0x08, 0x29, 0x02, 0x85, 0xa2,
	0x95, 0x2a, 0x21, 0x70, 0x9c, 0x69, 0x6c, 0x6d, 0xec, 0x89, 0x3c, 0xd3, 0xdd, 0x72, 0xe0, 0xc4,
	0x17, 0xe0, 0xc0, 0x87, 0xe2, 0xc0, 0x61, 0xb9, 0x71, 0x40, 0x68, 0xd5, 0x7e, 0x03, 0x3e, 0x01,
	0xf2, 0xfc, 0x8b, 0xed, 0x38, 0x99, 0x14, 0xba, 0x5c, 0xf6, 0x54, 0xcf, 0x9b, 0xdf, 0xbc, 0xf7,
	0xe6, 0xf7, 0xfe, 0x4d, 0x03, 0xbb, 0x9e, 0xef, 0x46, 0x11, 0x9e, 0x74, 0xd8, 0xa5, 0x33, 0x8d,
	0x09, 0x23, 0xe8, 0x8e, 0x94, 0x38, 0xf2, 0x6f, 0xb3, 0xe5, 0x11, 0x1a, 0x12, 0xda, 0x19, 0xba,
	0x14, 0x77, 0x9e, 0x3e, 0x1a, 0x62, 0xe6, 0x3e, 0xea, 0x78, 0x24, 0x88, 0xc4, 0x01, 0xfb, 0xf7,
	0x75, 0xd8, 0xe9, 0xd3, 0xf1, 0x09, 0x09, 0xc3, 0x80, 0x85, 0x38, 0x62, 0xa8, 0x01, 0x5b, 0x5e,
	0x8c, 0x5d, 0x46, 0xe2, 0x86, 0xd5, 0xb6, 0x0e, 0x2b, 0x03, 0xb5, 0x44, 0x08, 0x36, 0xce, 0x63,
	0x12, 0x36, 0xd6, 0xb9, 0x98, 0x7f, 0xa3, 0x4f, 0x61, 0x27, 0xd1, 0xc6, 0x88, 0x3a, 0x53, 0x6a,
	0x5b, 0x87, 0xd5, 0xe3, 0x7d, 0x47, 0xd8, 0x75, 0x12, 0xbb, 0x8e, 0xb4, 0xeb, 0x9c, 0x90, 0x20,
	0x1a, 0x64, 0xf1, 0xa8, 0x05, 0xc0, 0xc8, 0x69, 0x10, 0xe2, 0x09, 0xf1, 0x9e, 0x34, 0x36, 0xb8,
	0xea, 0x94, 0x04, 0xb5, 0xa1, 0x3a, 0x4c, 0x3e, 0x7c, 0x1c, 0x8c, 0x7d, 0xd6, 0x28, 0xb7, 0xad,
	0xc3, 0x8d, 0x41, 0x5a, 0x24, 0x34, 0x7c, 0xee, 0x52, 0x9f, 0x6b, 0xd8, 0x54, 0x1a, 0x94, 0x04,
	0x35, 0x61, 0xdb, 0x77, 0xa9, 0xef, 0x91, 0x11, 0x6e, 0x6c, 0xf1, 0x5d, 0xbd, 0x46, 0x1f, 0xc1,
	0x76, 0xe2, 0x8e, 0xcf, 0x26, 0x5e, 0x63, 0xdb, 0xe4, 0xb9, 0x86, 0xa2, 0x7b, 0x50, 0x91, 0x04,
	0x07, 0xa3, 0x46, 0x85, 0xeb, 0x9c, 0x09, 0xec, 0x87, 0xf0, 0x46, 0x86, 0xd2, 0x01, 0xa6, 0x53,
	0x12, 0x51, 0x8c, 0xee, 0x42, 0x39, 0x88, 0x46, 0xf8, 0x52, 0x12, 0x2b, 0x16, 0xf6, 0x37, 0xf0,
	0x7a, 0x9f, 0x8e, 0x1f, 0x07, 0xcc, 0x1f, 0xc5, 0xee, 0x33, 0x7d, 0xf1, 0xc5, 0x71, 0xa8, 0xc3,
	0x3a, 0x23, 0x32, 0x0a, 0xeb, 0x8c, 0xcc, 0xd4, 0x96, 0xd2, 0x6a, 0xdf, 0x86, 0xb7, 0x0a, 0xd4,
	0x2a, 0x5f, 0xec, 0x30, 0x63, 0x55, 0x93, 0xf5, 0x1f, 0xad, 0xa2, 0x3d, 0xd8, 0xa4, 0xd8, 0x8b,
	0x31, 0x93, 0xa1, 0x94, 0xab, 0x9c, 0x37, 0xca, 0x9c, 0xf6, 0xe6, 0xda, 0x82, 0x3b, 0x09, 0x67,
	0x13, 0x42, 0xf1, 0x89, 0x20, 0xf2, 0x86, 0x89, 0xb8, 0x0b, 0x25, 0x46, 0xba, 0xd2, 0x99, 0xe4,
	0x13, 0x75, 0xa0, 0x9c, 0x04, 0xac, 0xcb, 0x3d, 0x59, 0x1a, 0x58, 0x81, 0x13, 0x2a, 0x7a, 0x3c,
	0xc5, 0xb8, 0x8a, 0x9e, 0x52, 0xd1, 0xe3, 0x59, 0x65, 0x56, 0xd1, 0xcb, 0x26, 0xc6, 0x56, 0x3e,
	0x31, 0xf6, 0xe1, 0xcd, 0xdc, 0x25, 0x35, 0x01, 0x7f, 0x5a, 0x50, 0xef, 0xd3, 0xf1, 0x97, 0x53,
	0x1c, 0x99, 0xef, 0x7f, 0x17, 0xca, 0x53, 0x37, 0x66, 0x5d, 0x49, 0x80, 0x58, 0x28, 0x69, 0x4f,
	0x05, 0x84, 0x2f, 0x6e, 0xce, 0x82, 0xbe, 0x73, 0x79, 0xc5, 0x3b, 0xdb, 0x50, 0x0b, 0x2f, 0x26,
	0x2c, 0xa0, 0xc1, 0xb8, 0x3b, 0x1a, 0xc5, 0xb2, 0x02, 0x33, 0x32, 0xdb, 0x81, 0xbd, 0xec, 0xed,
	0x0c, 0x35, 0xf1, 0xc2, 0x82, 0xad, 0x3e, 0x1d, 0x7f, 0x76, 0x11, 0x8d, 0x6e, 0x98, 0x07, 0x99,
	0x08, 0x94, 0x72, 0x11, 0x50, 0xf5, 0xae, 0x7b, 0x8d, 0xb9, 0xde, 0xe7, 0x5a, 0x48, 0x39, 0xd7,
	0x42, 0x9a, 0xb0, 0xcd, 0x54, 0xfb, 0x12, 0x57, 0xd7, 0xeb, 0x64, 0x4f, 0xd1, 0xa0, 0x5a, 0x8f,
	0x5a, 0xdb, 0x0f, 0x78, 0xc6, 0x27, 0x37, 0x34, 0x70, 0xf1, 0x97, 0xc5, 0x5b, 0x74, 0xd7, 0xf3,
	0xf0, 0x94, 0x9d, 0xdf, 0x36, 0x23, 0x0f, 0x61, 0x23, 0xb9, 0xa6, 0x99, 0x0d, 0x0e, 0x7b, 0x29,
	0x4c, 0x88, 0x7e, 0x39, 0xbb, 0x9f, 0x81, 0x8f, 0xbf, 0x4b, 0x9c, 0xb9, 0xaf, 0x71, 0x34, 0xc2,
	0xb1, 0xc7, 0xbb, 0xec, 0xad, 0x32, 0xf2, 0x09, 0xd4, 0xc4, 0x88, 0xa2, 0xdc, 0x82, 0x99, 0x99,
	0x0c, 0x1c, 0x7d, 0x0c, 0x20, 0xd6, 0x7c, 0xa8, 0x18, 0x8b, 0x28, 0x05, 0x4e, 0x2a, 0x49, 0x91,
	0xc9, 0x0f, 0xcb, 0x4a, 0x4a, 0xcb, 0x12, 0x8c, 0x22, 0x95, 0x63, 0x04, 0x99, 0x19, 0x99, 0xbe,
	0x41, 0xec, 0x46, 0xf4, 0x1c, 0xc7, 0xe6, 0xc9, 0x96, 0x81, 0xa7, 0xdd, 0x18, 0x61, 0xca, 0xe4,
	0x80, 0xcb, 0xc8, 0xd0, 0x11, 0xec, 0x2a, 0x93, 0x31, 0xf6, 0x70, 0xf0, 0x14, 0xc7, 0x0d, 0xe0,
	0xb8, 0x39, 0x39, 0xba, 0x0f, 0x75, 0x25, 0x93, 0x94, 0x56, 0x39, 0x32, 0x27, 0xcd, 0xe4, 0x48,
	0x2d, 0x97, 0x23, 0xdf, 0xf2, 0xd6, 0x99, 0x8e, 0xb9, 0xce, 0x92, 0x7b, 0x50, 0xe1, 0x89, 0xc1,
	0xe9, 0x10, 0xd1, 0x9f, 0x09, 0xd0, 0x01, 0xec, 0xf0, 0x85, 0x26, 0x43, 0x24, 0x42, 0x56, 0x68,
	0x3f, 0x81, 0x7d, 0xad, 0xfe, 0x99, 0x1c, 0x52, 0xcc, 0x3c, 0x89, 0x0f, 0x60, 0x47, 0xa9, 0x10,
	0x89, 0x2a, 0x95, 0x67, 0x84, 0x72, 0x72, 0x96, 0xd4, 0xe4, 0xb4, 0xdf, 0x83, 0x77, 0x17, 0x1a,
	0xd3, 0x03, 0xe1, 0x27, 0xab, 0xc0, 0x25, 0xdf, 0x3c, 0xa6, 0xff, 0x95, 0x4b, 0x0b, 0xc7, 0x76,
	0x91, 0xab, 0x7e, 0x7e, 0x78, 0xff, 0xc8, 0x9f, 0x12, 0x03, 0x19, 0x6e, 0x05, 0xfb, 0xdf, 0x7c,
	0x14, 0x4f, 0x8b, 0xbc, 0x79, 0xed, 0xdd, 0x6f, 0x25, 0x78, 0x2d, 0xb5, 0xff, 0x12, 0x1a, 0x46,
	0x17, 0xea, 0xa2, 0x88, 0x75, 0x25, 0x18, 0x5b, 0x46, 0xee, 0xc0, 0x2b, 0xd2, 0x34, 0xe6, 0x1b,
	0x01, 0x18, 0x1b, 0x41, 0x35, 0xd7, 0x08, 0xbe, 0xe3, 0x65, 0x91, 0x8d, 0xe6, 0x6d, 0xb6, 0x82,
	0xe3, 0x5f, 0x2a, 0x50, 0xea, 0xd3, 0x31, 0x3a, 0x05, 0x48, 0xfd, 0x57, 0xd4, 0x72, 0x72, 0xff,
	0x59, 0x39, 0x99, 0x27, 0x7e, 0xf3, 0xfe, 0xf2, 0x7d, 0xed, 0xe1, 0x39, 0xec, 0xce, 0xbd, 0xf4,
	0x0f, 0x8a, 0xce, 0xe6, 0x51, 0xcd, 0xf7, 0x57, 0x41, 0x15, 0xd9, 0xd1, 0x6f, 0xfb, 0xa5, 0x76,
	0x14, 0x6a, 0xb9, 0x9d, 0xfc, 0xc3, 0x1d, 0x9d, 0x41, 0x2d, 0xf3, 0x68, 0x6f, 0x17, 0xf2, 0x90,
	0x42, 0x34, 0x0f, 0x4d, 0x08, 0xad, 0xfb, 0x31, 0x54, 0xd3, 0xef, 0xe1, 0x77, 0x8a, 0x0e, 0xa6,
	0x00, 0xcd, 0x07, 0x06, 0x80, 0x56, 0xdc, 0x83, 0x0d, 0xf1, 0xb2, 0x2c, 0x3a, 0x90, 0xec, 0x34,
	0xdb, 0x8b, 0x76, 0xb4, 0x8e, 0x53, 0x80, 0xd4, 0x8b, 0xac, 0x30, 0x3d, 0x66, 0xfb, 0xc5, 0xe9,
	0x51, 0xf0, 0xe2, 0x39, 0x83, 0x5a, 0xe6, 0x5d, 0x53, 0xe8, 0x47, 0x1a, 0x51, 0x4c, 0x67, 0xe1,
	0x9c, 0xbc, 0x84, 0xbd, 0x05, 0x03, 0xee, 0x68, 0xb1, 0x8e, 0x3c, 0xb6, 0x79, 0xbc, 0x3a, 0x76,
	0xb1, 0x65, 0x3d, 0xc7, 0x56, 0xb0, 0xac, 0xb0, 0xab, 0x58, 0xce, 0x8f, 0xa6, 0xa4, 0x0c, 0xe6,
	0xe6, 0x52, 0x61, 0x19, 0xe4, 0x51, 0xc5, 0x65, 0xb0, 0x68, 0xc8, 0xa0, 0xef, 0xa1, 0x9e, 0x1b,
	0x30, 0xf6, 0xb2, 0xf3, 0x32, 0x76, 0x47, 0x66, 0x8c, 0xb2, 0xd0, 0xfb, 0xe2, 0xd7, 0xab, 0x96,
	0xf5, 0xfc, 0xaa, 0x65, 0xbd, 0xb8, 0x6a, 0x59, 0x3f, 0x5f, 0xb7, 0xd6, 0x9e, 0x5f, 0xb7, 0xd6,
	0xfe, 0xb8, 0x6e, 0xad, 0x9d, 0x7d, 0x30, 0x0e, 0x98, 0x7f, 0x31, 0x74, 0x3c, 0x12, 0x76, 0xba,
	0x94, 0xc5, 0xee, 0x57, 0x31, 0x61, 0xc4, 0x23, 0x93, 0x8e, 0xfa, 0x79, 0xe8, 0x52, 0x7f, 0xb1,
	0x1f, 0xa6, 0x98, 0x0e, 0x37, 0xf9, 0x6f, 0x3f, 0x1f, 0xfe, 0x13, 0x00, 0x00, 0xff, 0xff, 0x99,
	0x62, 0x65, 0xec, 0x40, 0x12, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	Commitment(ctx context.Context, in *MsgCommitment, opts ...grpc.CallOption) (*MsgCommitmentResponse, error)
	WithdrawTimelock(ctx context.Context, in *MsgWithdrawTimelock, opts ...grpc.CallOption) (*MsgWithdrawTimelockResponse, error)
	WithdrawHashlock(ctx context.Context, in *MsgWithdrawHashlock, opts ...grpc.CallOption) (*MsgWithdrawHashlockResponse, error)
	CloseChannel(ctx context.Context, in *MsgCloseChannel, opts ...grpc.CallOption) (*MsgCloseChannelResponse, error)
	OpenChannel(ctx context.Context, in *MsgOpenChannel, opts ...grpc.CallOption) (*MsgOpenChannelResponse, error)
	Fund(ctx context.Context, in *MsgFund, opts ...grpc.CallOption) (*MsgFundResponse, error)
	Acceptfund(ctx context.Context, in *MsgAcceptfund, opts ...grpc.CallOption) (*MsgAcceptfundResponse, error)
	Sendercommit(ctx context.Context, in *MsgSendercommit, opts ...grpc.CallOption) (*MsgSendercommitResponse, error)
	Senderwithdrawtimelock(ctx context.Context, in *MsgSenderwithdrawtimelock, opts ...grpc.CallOption) (*MsgSenderwithdrawtimelockResponse, error)
	Senderwithdrawhashlock(ctx context.Context, in *MsgSenderwithdrawhashlock, opts ...grpc.CallOption) (*MsgSenderwithdrawhashlockResponse, error)
	Receiverwithdraw(ctx context.Context, in *MsgReceiverwithdraw, opts ...grpc.CallOption) (*MsgReceiverwithdrawResponse, error)
	Receivercommit(ctx context.Context, in *MsgReceivercommit, opts ...grpc.CallOption) (*MsgReceivercommitResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) Commitment(ctx context.Context, in *MsgCommitment, opts ...grpc.CallOption) (*MsgCommitmentResponse, error) {
	out := new(MsgCommitmentResponse)
	err := c.cc.Invoke(ctx, "/channel.channel.Msg/Commitment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawTimelock(ctx context.Context, in *MsgWithdrawTimelock, opts ...grpc.CallOption) (*MsgWithdrawTimelockResponse, error) {
	out := new(MsgWithdrawTimelockResponse)
	err := c.cc.Invoke(ctx, "/channel.channel.Msg/WithdrawTimelock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawHashlock(ctx context.Context, in *MsgWithdrawHashlock, opts ...grpc.CallOption) (*MsgWithdrawHashlockResponse, error) {
	out := new(MsgWithdrawHashlockResponse)
	err := c.cc.Invoke(ctx, "/channel.channel.Msg/WithdrawHashlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CloseChannel(ctx context.Context, in *MsgCloseChannel, opts ...grpc.CallOption) (*MsgCloseChannelResponse, error) {
	out := new(MsgCloseChannelResponse)
	err := c.cc.Invoke(ctx, "/channel.channel.Msg/CloseChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) OpenChannel(ctx context.Context, in *MsgOpenChannel, opts ...grpc.CallOption) (*MsgOpenChannelResponse, error) {
	out := new(MsgOpenChannelResponse)
	err := c.cc.Invoke(ctx, "/channel.channel.Msg/OpenChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Fund(ctx context.Context, in *MsgFund, opts ...grpc.CallOption) (*MsgFundResponse, error) {
	out := new(MsgFundResponse)
	err := c.cc.Invoke(ctx, "/channel.channel.Msg/Fund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Acceptfund(ctx context.Context, in *MsgAcceptfund, opts ...grpc.CallOption) (*MsgAcceptfundResponse, error) {
	out := new(MsgAcceptfundResponse)
	err := c.cc.Invoke(ctx, "/channel.channel.Msg/Acceptfund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Sendercommit(ctx context.Context, in *MsgSendercommit, opts ...grpc.CallOption) (*MsgSendercommitResponse, error) {
	out := new(MsgSendercommitResponse)
	err := c.cc.Invoke(ctx, "/channel.channel.Msg/Sendercommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Senderwithdrawtimelock(ctx context.Context, in *MsgSenderwithdrawtimelock, opts ...grpc.CallOption) (*MsgSenderwithdrawtimelockResponse, error) {
	out := new(MsgSenderwithdrawtimelockResponse)
	err := c.cc.Invoke(ctx, "/channel.channel.Msg/Senderwithdrawtimelock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Senderwithdrawhashlock(ctx context.Context, in *MsgSenderwithdrawhashlock, opts ...grpc.CallOption) (*MsgSenderwithdrawhashlockResponse, error) {
	out := new(MsgSenderwithdrawhashlockResponse)
	err := c.cc.Invoke(ctx, "/channel.channel.Msg/Senderwithdrawhashlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Receiverwithdraw(ctx context.Context, in *MsgReceiverwithdraw, opts ...grpc.CallOption) (*MsgReceiverwithdrawResponse, error) {
	out := new(MsgReceiverwithdrawResponse)
	err := c.cc.Invoke(ctx, "/channel.channel.Msg/Receiverwithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Receivercommit(ctx context.Context, in *MsgReceivercommit, opts ...grpc.CallOption) (*MsgReceivercommitResponse, error) {
	out := new(MsgReceivercommitResponse)
	err := c.cc.Invoke(ctx, "/channel.channel.Msg/Receivercommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	Commitment(context.Context, *MsgCommitment) (*MsgCommitmentResponse, error)
	WithdrawTimelock(context.Context, *MsgWithdrawTimelock) (*MsgWithdrawTimelockResponse, error)
	WithdrawHashlock(context.Context, *MsgWithdrawHashlock) (*MsgWithdrawHashlockResponse, error)
	CloseChannel(context.Context, *MsgCloseChannel) (*MsgCloseChannelResponse, error)
	OpenChannel(context.Context, *MsgOpenChannel) (*MsgOpenChannelResponse, error)
	Fund(context.Context, *MsgFund) (*MsgFundResponse, error)
	Acceptfund(context.Context, *MsgAcceptfund) (*MsgAcceptfundResponse, error)
	Sendercommit(context.Context, *MsgSendercommit) (*MsgSendercommitResponse, error)
	Senderwithdrawtimelock(context.Context, *MsgSenderwithdrawtimelock) (*MsgSenderwithdrawtimelockResponse, error)
	Senderwithdrawhashlock(context.Context, *MsgSenderwithdrawhashlock) (*MsgSenderwithdrawhashlockResponse, error)
	Receiverwithdraw(context.Context, *MsgReceiverwithdraw) (*MsgReceiverwithdrawResponse, error)
	Receivercommit(context.Context, *MsgReceivercommit) (*MsgReceivercommitResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) Commitment(ctx context.Context, req *MsgCommitment) (*MsgCommitmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commitment not implemented")
}
func (*UnimplementedMsgServer) WithdrawTimelock(ctx context.Context, req *MsgWithdrawTimelock) (*MsgWithdrawTimelockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawTimelock not implemented")
}
func (*UnimplementedMsgServer) WithdrawHashlock(ctx context.Context, req *MsgWithdrawHashlock) (*MsgWithdrawHashlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawHashlock not implemented")
}
func (*UnimplementedMsgServer) CloseChannel(ctx context.Context, req *MsgCloseChannel) (*MsgCloseChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseChannel not implemented")
}
func (*UnimplementedMsgServer) OpenChannel(ctx context.Context, req *MsgOpenChannel) (*MsgOpenChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenChannel not implemented")
}
func (*UnimplementedMsgServer) Fund(ctx context.Context, req *MsgFund) (*MsgFundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fund not implemented")
}
func (*UnimplementedMsgServer) Acceptfund(ctx context.Context, req *MsgAcceptfund) (*MsgAcceptfundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Acceptfund not implemented")
}
func (*UnimplementedMsgServer) Sendercommit(ctx context.Context, req *MsgSendercommit) (*MsgSendercommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sendercommit not implemented")
}
func (*UnimplementedMsgServer) Senderwithdrawtimelock(ctx context.Context, req *MsgSenderwithdrawtimelock) (*MsgSenderwithdrawtimelockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Senderwithdrawtimelock not implemented")
}
func (*UnimplementedMsgServer) Senderwithdrawhashlock(ctx context.Context, req *MsgSenderwithdrawhashlock) (*MsgSenderwithdrawhashlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Senderwithdrawhashlock not implemented")
}
func (*UnimplementedMsgServer) Receiverwithdraw(ctx context.Context, req *MsgReceiverwithdraw) (*MsgReceiverwithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Receiverwithdraw not implemented")
}
func (*UnimplementedMsgServer) Receivercommit(ctx context.Context, req *MsgReceivercommit) (*MsgReceivercommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Receivercommit not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_Commitment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCommitment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Commitment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channel.channel.Msg/Commitment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Commitment(ctx, req.(*MsgCommitment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawTimelock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawTimelock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawTimelock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channel.channel.Msg/WithdrawTimelock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawTimelock(ctx, req.(*MsgWithdrawTimelock))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawHashlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawHashlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawHashlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channel.channel.Msg/WithdrawHashlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawHashlock(ctx, req.(*MsgWithdrawHashlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CloseChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCloseChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CloseChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channel.channel.Msg/CloseChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CloseChannel(ctx, req.(*MsgCloseChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_OpenChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgOpenChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).OpenChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channel.channel.Msg/OpenChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).OpenChannel(ctx, req.(*MsgOpenChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Fund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFund)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Fund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channel.channel.Msg/Fund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Fund(ctx, req.(*MsgFund))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Acceptfund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAcceptfund)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Acceptfund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channel.channel.Msg/Acceptfund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Acceptfund(ctx, req.(*MsgAcceptfund))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Sendercommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendercommit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Sendercommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channel.channel.Msg/Sendercommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Sendercommit(ctx, req.(*MsgSendercommit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Senderwithdrawtimelock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSenderwithdrawtimelock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Senderwithdrawtimelock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channel.channel.Msg/Senderwithdrawtimelock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Senderwithdrawtimelock(ctx, req.(*MsgSenderwithdrawtimelock))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Senderwithdrawhashlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSenderwithdrawhashlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Senderwithdrawhashlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channel.channel.Msg/Senderwithdrawhashlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Senderwithdrawhashlock(ctx, req.(*MsgSenderwithdrawhashlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Receiverwithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReceiverwithdraw)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Receiverwithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channel.channel.Msg/Receiverwithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Receiverwithdraw(ctx, req.(*MsgReceiverwithdraw))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Receivercommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReceivercommit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Receivercommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channel.channel.Msg/Receivercommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Receivercommit(ctx, req.(*MsgReceivercommit))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "channel.channel.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Commitment",
			Handler:    _Msg_Commitment_Handler,
		},
		{
			MethodName: "WithdrawTimelock",
			Handler:    _Msg_WithdrawTimelock_Handler,
		},
		{
			MethodName: "WithdrawHashlock",
			Handler:    _Msg_WithdrawHashlock_Handler,
		},
		{
			MethodName: "CloseChannel",
			Handler:    _Msg_CloseChannel_Handler,
		},
		{
			MethodName: "OpenChannel",
			Handler:    _Msg_OpenChannel_Handler,
		},
		{
			MethodName: "Fund",
			Handler:    _Msg_Fund_Handler,
		},
		{
			MethodName: "Acceptfund",
			Handler:    _Msg_Acceptfund_Handler,
		},
		{
			MethodName: "Sendercommit",
			Handler:    _Msg_Sendercommit_Handler,
		},
		{
			MethodName: "Senderwithdrawtimelock",
			Handler:    _Msg_Senderwithdrawtimelock_Handler,
		},
		{
			MethodName: "Senderwithdrawhashlock",
			Handler:    _Msg_Senderwithdrawhashlock_Handler,
		},
		{
			MethodName: "Receiverwithdraw",
			Handler:    _Msg_Receiverwithdraw_Handler,
		},
		{
			MethodName: "Receivercommit",
			Handler:    _Msg_Receivercommit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "channel/tx.proto",
}

func (m *MsgCommitment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCommitment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCommitment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Channelid) > 0 {
		i -= len(m.Channelid)
		copy(dAtA[i:], m.Channelid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Channelid)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Coinhtlc != nil {
		{
			size, err := m.Coinhtlc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.Hashcode) > 0 {
		i -= len(m.Hashcode)
		copy(dAtA[i:], m.Hashcode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Hashcode)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ToHashlock) > 0 {
		i -= len(m.ToHashlock)
		copy(dAtA[i:], m.ToHashlock)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ToHashlock)))
		i--
		dAtA[i] = 0x32
	}
	if m.Blockheight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Blockheight))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ToTimelock) > 0 {
		i -= len(m.ToTimelock)
		copy(dAtA[i:], m.ToTimelock)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ToTimelock)))
		i--
		dAtA[i] = 0x22
	}
	if m.Cointocreator != nil {
		{
			size, err := m.Cointocreator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCommitmentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCommitmentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCommitmentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawTimelock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawTimelock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawTimelock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintTx(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawTimelockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawTimelockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawTimelockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawHashlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawHashlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawHashlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Secret) > 0 {
		i -= len(m.Secret)
		copy(dAtA[i:], m.Secret)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Secret)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintTx(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawHashlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawHashlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawHashlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCloseChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCloseChannel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCloseChannel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Channelid) > 0 {
		i -= len(m.Channelid)
		copy(dAtA[i:], m.Channelid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Channelid)))
		i--
		dAtA[i] = 0x3a
	}
	if m.CoinB != nil {
		{
			size, err := m.CoinB.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.ToB) > 0 {
		i -= len(m.ToB)
		copy(dAtA[i:], m.ToB)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ToB)))
		i--
		dAtA[i] = 0x2a
	}
	if m.CoinA != nil {
		{
			size, err := m.CoinA.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ToA) > 0 {
		i -= len(m.ToA)
		copy(dAtA[i:], m.ToA)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ToA)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCloseChannelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCloseChannelResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCloseChannelResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgOpenChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgOpenChannel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgOpenChannel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MultisigAddr) > 0 {
		i -= len(m.MultisigAddr)
		copy(dAtA[i:], m.MultisigAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MultisigAddr)))
		i--
		dAtA[i] = 0x32
	}
	if m.CoinB != nil {
		{
			size, err := m.CoinB.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.CoinA != nil {
		{
			size, err := m.CoinA.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.PartB) > 0 {
		i -= len(m.PartB)
		copy(dAtA[i:], m.PartB)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PartB)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PartA) > 0 {
		i -= len(m.PartA)
		copy(dAtA[i:], m.PartA)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PartA)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgOpenChannelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgOpenChannelResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgOpenChannelResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFund) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFund) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFund) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Multisig) > 0 {
		i -= len(m.Multisig)
		copy(dAtA[i:], m.Multisig)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Multisig)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Timelock) > 0 {
		i -= len(m.Timelock)
		copy(dAtA[i:], m.Timelock)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Timelock)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Hashcode) > 0 {
		i -= len(m.Hashcode)
		copy(dAtA[i:], m.Hashcode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Hashcode)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Coinlock != nil {
		{
			size, err := m.Coinlock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Channelid) > 0 {
		i -= len(m.Channelid)
		copy(dAtA[i:], m.Channelid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Channelid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFundResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFundResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFundResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAcceptfund) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAcceptfund) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAcceptfund) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Multisig) > 0 {
		i -= len(m.Multisig)
		copy(dAtA[i:], m.Multisig)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Multisig)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Timelock) > 0 {
		i -= len(m.Timelock)
		copy(dAtA[i:], m.Timelock)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Timelock)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Hashcode) > 0 {
		i -= len(m.Hashcode)
		copy(dAtA[i:], m.Hashcode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Hashcode)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Coin != nil {
		{
			size, err := m.Coin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Channelid) > 0 {
		i -= len(m.Channelid)
		copy(dAtA[i:], m.Channelid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Channelid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAcceptfundResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAcceptfundResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAcceptfundResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendercommit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendercommit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendercommit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Multisig) > 0 {
		i -= len(m.Multisig)
		copy(dAtA[i:], m.Multisig)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Multisig)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Timelocksender) > 0 {
		i -= len(m.Timelocksender)
		copy(dAtA[i:], m.Timelocksender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Timelocksender)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Timelockreceiver) > 0 {
		i -= len(m.Timelockreceiver)
		copy(dAtA[i:], m.Timelockreceiver)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Timelockreceiver)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Hashcodedest) > 0 {
		i -= len(m.Hashcodedest)
		copy(dAtA[i:], m.Hashcodedest)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Hashcodedest)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Cointransfer != nil {
		{
			size, err := m.Cointransfer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.Timelockhtlc) > 0 {
		i -= len(m.Timelockhtlc)
		copy(dAtA[i:], m.Timelockhtlc)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Timelockhtlc)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Hashcodehtlc) > 0 {
		i -= len(m.Hashcodehtlc)
		copy(dAtA[i:], m.Hashcodehtlc)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Hashcodehtlc)))
		i--
		dAtA[i] = 0x32
	}
	if m.Cointohtlc != nil {
		{
			size, err := m.Cointohtlc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Cointosender != nil {
		{
			size, err := m.Cointosender.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Channelid) > 0 {
		i -= len(m.Channelid)
		copy(dAtA[i:], m.Channelid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Channelid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendercommitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendercommitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendercommitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Indextransfer) > 0 {
		i -= len(m.Indextransfer)
		copy(dAtA[i:], m.Indextransfer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Indextransfer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Indexhtlc) > 0 {
		i -= len(m.Indexhtlc)
		copy(dAtA[i:], m.Indexhtlc)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Indexhtlc)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSenderwithdrawtimelock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSenderwithdrawtimelock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSenderwithdrawtimelock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintTx(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Transferindex) > 0 {
		i -= len(m.Transferindex)
		copy(dAtA[i:], m.Transferindex)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Transferindex)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSenderwithdrawtimelockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSenderwithdrawtimelockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSenderwithdrawtimelockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSenderwithdrawhashlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSenderwithdrawhashlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSenderwithdrawhashlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Secret) > 0 {
		i -= len(m.Secret)
		copy(dAtA[i:], m.Secret)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Secret)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintTx(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Transferindex) > 0 {
		i -= len(m.Transferindex)
		copy(dAtA[i:], m.Transferindex)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Transferindex)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSenderwithdrawhashlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSenderwithdrawhashlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSenderwithdrawhashlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgReceiverwithdraw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReceiverwithdraw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReceiverwithdraw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Secret) > 0 {
		i -= len(m.Secret)
		copy(dAtA[i:], m.Secret)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Secret)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintTx(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Transferindex) > 0 {
		i -= len(m.Transferindex)
		copy(dAtA[i:], m.Transferindex)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Transferindex)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgReceiverwithdrawResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReceiverwithdrawResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReceiverwithdrawResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgReceivercommit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReceivercommit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReceivercommit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Multisig) > 0 {
		i -= len(m.Multisig)
		copy(dAtA[i:], m.Multisig)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Multisig)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Timelocksender) > 0 {
		i -= len(m.Timelocksender)
		copy(dAtA[i:], m.Timelocksender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Timelocksender)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Hashcodedest) > 0 {
		i -= len(m.Hashcodedest)
		copy(dAtA[i:], m.Hashcodedest)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Hashcodedest)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Cointransfer != nil {
		{
			size, err := m.Cointransfer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.Timelockhtlc) > 0 {
		i -= len(m.Timelockhtlc)
		copy(dAtA[i:], m.Timelockhtlc)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Timelockhtlc)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Hashcodehtlc) > 0 {
		i -= len(m.Hashcodehtlc)
		copy(dAtA[i:], m.Hashcodehtlc)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Hashcodehtlc)))
		i--
		dAtA[i] = 0x32
	}
	if m.Cointohtlc != nil {
		{
			size, err := m.Cointohtlc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Cointoreceiver != nil {
		{
			size, err := m.Cointoreceiver.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Channelid) > 0 {
		i -= len(m.Channelid)
		copy(dAtA[i:], m.Channelid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Channelid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgReceivercommitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReceivercommitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReceivercommitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Indextransfer) > 0 {
		i -= len(m.Indextransfer)
		copy(dAtA[i:], m.Indextransfer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Indextransfer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Indexhtlc) > 0 {
		i -= len(m.Indexhtlc)
		copy(dAtA[i:], m.Indexhtlc)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Indexhtlc)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCommitment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Cointocreator != nil {
		l = m.Cointocreator.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ToTimelock)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Blockheight != 0 {
		n += 1 + sovTx(uint64(m.Blockheight))
	}
	l = len(m.ToHashlock)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Hashcode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Coinhtlc != nil {
		l = m.Coinhtlc.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Channelid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCommitmentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgWithdrawTimelock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgWithdrawTimelockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWithdrawHashlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Secret)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgWithdrawHashlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCloseChannel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ToA)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CoinA != nil {
		l = m.CoinA.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ToB)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CoinB != nil {
		l = m.CoinB.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Channelid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCloseChannelResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgOpenChannel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PartA)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PartB)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CoinA != nil {
		l = m.CoinA.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CoinB != nil {
		l = m.CoinB.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MultisigAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgOpenChannelResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgFund) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Channelid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Coinlock != nil {
		l = m.Coinlock.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Hashcode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Timelock)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Multisig)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgFundResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAcceptfund) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Channelid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Coin != nil {
		l = m.Coin.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Hashcode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Timelock)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Multisig)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAcceptfundResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSendercommit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Channelid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Cointosender != nil {
		l = m.Cointosender.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Cointohtlc != nil {
		l = m.Cointohtlc.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Hashcodehtlc)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Timelockhtlc)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Cointransfer != nil {
		l = m.Cointransfer.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Hashcodedest)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Timelockreceiver)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Timelocksender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Multisig)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSendercommitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Indexhtlc)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Indextransfer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSenderwithdrawtimelock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Transferindex)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSenderwithdrawtimelockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSenderwithdrawhashlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Transferindex)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Secret)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSenderwithdrawhashlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgReceiverwithdraw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Transferindex)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Secret)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgReceiverwithdrawResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgReceivercommit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Channelid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Cointoreceiver != nil {
		l = m.Cointoreceiver.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Cointohtlc != nil {
		l = m.Cointohtlc.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Hashcodehtlc)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Timelockhtlc)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Cointransfer != nil {
		l = m.Cointransfer.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Hashcodedest)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Timelocksender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Multisig)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgReceivercommitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Indexhtlc)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Indextransfer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCommitment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCommitment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCommitment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cointocreator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cointocreator == nil {
				m.Cointocreator = &types.Coin{}
			}
			if err := m.Cointocreator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToTimelock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToTimelock = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blockheight", wireType)
			}
			m.Blockheight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Blockheight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToHashlock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToHashlock = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hashcode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hashcode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coinhtlc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coinhtlc == nil {
				m.Coinhtlc = &types.Coin{}
			}
			if err := m.Coinhtlc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channelid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channelid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCommitmentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCommitmentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCommitmentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawTimelock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawTimelock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawTimelock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawTimelockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawTimelockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawTimelockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawHashlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawHashlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawHashlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawHashlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawHashlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawHashlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCloseChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCloseChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCloseChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToA = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinA", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CoinA == nil {
				m.CoinA = &types.Coin{}
			}
			if err := m.CoinA.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToB = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinB", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CoinB == nil {
				m.CoinB = &types.Coin{}
			}
			if err := m.CoinB.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channelid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channelid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCloseChannelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCloseChannelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCloseChannelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgOpenChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgOpenChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgOpenChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartA = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartB = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinA", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CoinA == nil {
				m.CoinA = &types.Coin{}
			}
			if err := m.CoinA.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinB", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CoinB == nil {
				m.CoinB = &types.Coin{}
			}
			if err := m.CoinB.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultisigAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MultisigAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgOpenChannelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgOpenChannelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgOpenChannelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFund) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFund: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFund: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channelid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channelid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coinlock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coinlock == nil {
				m.Coinlock = &types.Coin{}
			}
			if err := m.Coinlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hashcode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hashcode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timelock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timelock = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multisig", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Multisig = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFundResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFundResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFundResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAcceptfund) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAcceptfund: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAcceptfund: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channelid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channelid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coin == nil {
				m.Coin = &types.Coin{}
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hashcode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hashcode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timelock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timelock = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multisig", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Multisig = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAcceptfundResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAcceptfundResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAcceptfundResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendercommit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendercommit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendercommit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channelid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channelid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cointosender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cointosender == nil {
				m.Cointosender = &types.Coin{}
			}
			if err := m.Cointosender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cointohtlc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cointohtlc == nil {
				m.Cointohtlc = &types.Coin{}
			}
			if err := m.Cointohtlc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hashcodehtlc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hashcodehtlc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timelockhtlc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timelockhtlc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cointransfer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cointransfer == nil {
				m.Cointransfer = &types.Coin{}
			}
			if err := m.Cointransfer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hashcodedest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hashcodedest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timelockreceiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timelockreceiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timelocksender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timelocksender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multisig", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Multisig = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendercommitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendercommitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendercommitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Indexhtlc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Indexhtlc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Indextransfer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Indextransfer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSenderwithdrawtimelock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSenderwithdrawtimelock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSenderwithdrawtimelock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transferindex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transferindex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSenderwithdrawtimelockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSenderwithdrawtimelockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSenderwithdrawtimelockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSenderwithdrawhashlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSenderwithdrawhashlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSenderwithdrawhashlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transferindex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transferindex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSenderwithdrawhashlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSenderwithdrawhashlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSenderwithdrawhashlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReceiverwithdraw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReceiverwithdraw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReceiverwithdraw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transferindex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transferindex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReceiverwithdrawResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReceiverwithdrawResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReceiverwithdrawResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReceivercommit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReceivercommit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReceivercommit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channelid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channelid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cointoreceiver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cointoreceiver == nil {
				m.Cointoreceiver = &types.Coin{}
			}
			if err := m.Cointoreceiver.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cointohtlc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cointohtlc == nil {
				m.Cointohtlc = &types.Coin{}
			}
			if err := m.Cointohtlc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hashcodehtlc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hashcodehtlc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timelockhtlc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timelockhtlc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cointransfer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cointransfer == nil {
				m.Cointransfer = &types.Coin{}
			}
			if err := m.Cointransfer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hashcodedest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hashcodedest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timelocksender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timelocksender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multisig", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Multisig = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReceivercommitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReceivercommitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReceivercommitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Indexhtlc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Indexhtlc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Indextransfer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Indextransfer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
